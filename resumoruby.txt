=============
 Resumo Ruby
=============

 -------
 Ruby é:
 -------
  -> Uma linguagem de Alto Nivel: escrever em ruby 
     é como escrever em ingles regular
  -> Interpretado: não precisa de um compilador
     para escrever e executar o ruby
  -> Orientado a objtetos: permite aos usuários
     manipularem estruturas de dados chamados de 
     objetos para criar e executar programas, tudo
     em ruby são objetos
  -> Linguagem Fácil de Usar: 
         * Criado por Yukihiro Matsumoto, em 1995
      é uma linguagem que enfatiza as necessidades
      humanas sobre as do computador
  -> Não se usa nenhum ponto e virgula


  ---------------
  Tipos de Dados:
  ---------------

    -> Existem 3 tipos de dados em ruby
         1º ) números(inteiros ou floats)
         2º ) booleanos(true ou false)
         3º ) Strings(palavras ou frases)

  Variáveis:
     -> Uma palavra ou nome que apreende um único
        valor para usar posteriormente, esse único
        valor em ruby pode ser de qualquer um dos
        3 tipos de dados

              ex: nro = 1
                  nome = 'nome'
                  bool = true
   -----------
   Matemática:
   -----------

      -> existem 6 operadores aritméticos em ruby:
            1º) Adição: +
            2º) Subtração: -
            3º) Multiplicação: *
            4º) Divisão: /
            5º) Exponenciação: **
            6º) Módulo: %

      -> Como fazer os calculos:

          Adição: nro1 + nro2
           ex: 2 + 1 = 3
          
          Subtração: nro1 - nro2
           ex: 2 - 1 = 1
          
          Multiplicação: nro1 * nro2
           ex: 2 * 1 = 2
          
          Divisão: nro1 / nro2
           ex 4 / 2 = 2
          
          Exponenciação: multiplas multiplicações
            base ** expoente
           
           ex: 2 ** 3 = 8 (2*2*2)

          Modulo: resto de uma divisão
            nro1 % nro2

           ex: 25 % 7 = 4
            o resto da divisão de 25 por 7 é 4

  ---------------
  Saida de texto:
  ---------------

     print : apenas leva tudo o que voce escreve
             e imprime na tela

     puts : adiciona uma nova linha em branco e 
            depois imprime o que voce deseja

  --------
  Métodos:
  --------

     -> pode pensar em métodos como "habilidades"
        que certos objetos tem
     -> Interprete é o programa que leva o código
        que voce escreve e o executa. voce digita
        o código no editor, o interprete le seu 
        código e mostra o resultado da execução
        no console

     -> Alguns tipos de métodos usados:

         .length = retorna um tamanho de String
         .reverse = coloca uma String ao contrario
         .upcase = coloca tudo em Maiusculo
         .downcase = coloca tudo em Minusculo
  
  ------------
  Comentários:
  ------------

     -> Comentarios serve para explicar o código
     para quem vai mexer nele depois de voce.
     -> Em ruby o comentario é #

       ex: # isto é um comentario 

     -> COMENTARIO DE UMA LINHA: #

            ex: # Comentario de uma linha

     -> COMENTARIO DE VARIAS LINHAS: =begin =end

        ex:   =begin 
                isto é um comentario
                de 
                varias
                linhas
              =end

         obs: não coloque espaço entre o = e o begin\end
  
  --------------------- 
  Criação de Variáveis:
  ---------------------

     -> por convenção:
         * as variaveis começam com letras minusculas
               ex: nome
         * as palavras devem ser separadas com sublinhado
            ex: master_chase
     -> essas regras são só para evitar confusão
   
     -> Não precisa definir o tipo de variavel em ruby,
        só colocar o nome, um = e depois o valor que deseja
        armazenar

 ---------------------
 Entradas no programa:
 ---------------------


      -> Comandos para interagir com o usuário
      
      gets : é o comando para ter entrada do usuário
      
      chomp : elimina uma linha extra que o comando gets cria
  
      obs: esses dois trabalham juntos, se quiser
          ex: vaeiavel = gets.chomp
 
 --------------------------------
 Saida do programa com Variaveis:
 --------------------------------


     -> Para sair a entrada dada pelo usuário, usamo a seguinte ideia:

            #{nome_variavel}

       assim quando quisermos que a saida saia com a informação de
       uma variavel em formato de String usamos desta forma
       ================================
       ex: nome = "Gabriel"
           print "meu nome é #{nome}!"
           saida: meu nome é Gabriel!
       ================================
 
 ----------------------------
 Arrumando a saida da String:
 ----------------------------

      -> Usaremos um novo método para colocar a primeira letra 
         maiuscula
          ============
          .capitalize!
          ============
       o "!" é usado para modificar o valor da variavel
 
 --------------------------
 Controles de fluxo em Ruby
 --------------------------

  Comando IF: 
      -> if pega uma expressão e verifica se ela é verdadeira ou falsa
      -> se ela for verdadeira, ruby executa o bloco de código dentro
         da parte definida para rodar se for verdadeira, se for falsa
         ele não roda o bloco, ele pula e vai para a próxima

    ex:  =================================================== 
         if 1 < 2
            print "Se for verdadeiro esta parte irá rodar"
         end
         ===================================================

      -> sempre que terminar de definir o if termine identando com um 
         end no final, estando este end bem abaixo do if como acima

  
  Comando ELSE:
      -> o else anda sempre junto com o if, se no if der falso o else
         possui outro bloco de código que roda quando o if der falso
        
      ex: 
          ========================================
            if  3 < 2
               print "é verdadeiro"  #como é falso esta parte roda
            else
               print "é falso" #como é falso esta parte irá rodar
            end
          ========================================

  Comando ELSIF:
      -> Quando deseja colocar mais que duas opções em um if/else
         se usa o elsif, ele incrementa os tipos possiveis quando se 
         faz um teste

    ex: 
        ======================================
         if x < y
           puts "x é menor que y"
         elsif x > y
           puts "x é maior que y"
         else
           puts "x é igual a y"
         end
        =====================================


   Comando UNLESS:
      -> Algumas vezes voce deseja verificar se a informação é falsa de
         vez de ser verdadeira, portanto ruby possui o comando unless
         para isso

       ex: você não deseja comer algo a não ser(unless) voce esteja com 
           fome, então quando tu sentir fome tu come

           =========================================
              unless fome
                 puts "vou ficar programando"
              else
                puts "vou comer algo"
              end
           =========================================

      -> Ou seja, tu vai ficar programando(se fome for falso) a não ser que
         voce fique com fome (fome fica verdadeiro)

  
   Verificar se é igual ou não:
        -> quando usamos o "=" significa que estamos colocando valores
           em uma variavel
        -> quando usamos o "==" estamos verificando se dois valores ou
           variaveis numéricas são iguais

       ex: 
           variavel1 = 2
           variavel2 = 3
           variavel1 = variavel2 #você está colocando o valor de variavel2
                                 #dentro da variavel1

           variavel1 == variavel2 #voce esta verificando se elas são iguais
   
   Comandos de verificação(alem do ==):

      < : menor que
      > : maior que
      <= : menor ou igual que
      >= : maior ou igual que
 
     ex:
          testes que dão true:          testes que dão false:
          16 < 22                         16 > 22
          22 > 16                         22 < 16
          16 <= 16                        22 <= 16
          22 >= 22                        16 >= 22

    Operadores lógicos:

        && : segue a ideia lógica do "e" da lógica seguindo a seguinte
             tabela:

        =========================
         true && true   # = true
         true && false  # = false
        false && true   # = false
        false && false  # = false
        =========================
        
         ex: 
           
             3 > 2 && 4 >= 4   # a resposta para isso é verdadeiro(true)

       || : segue a ideia lógica do "ou" da lógica seguindo a seguinte
            tabela:

         ==========================
           true || true   # = true  
           true || false  # = true
          false || true   # = true
          false || false  # = false
         ==========================   

          ex:

             3 == 3 || 4 == 4   # a resposta será verdadeira(true) 


        ! : segue a ideia lógica do "não" da lógica seguindo a seguinte
            tabela:

          ====================
           !true   # = false
           !false  # = true
          ===================   

          ex:

               !(4 ==4) # resposta será falsa
               |(4 > 4) # resposta será verdadeira

       Combinando os três:
           -> Se pode combinar os tres operadores lógicos como quiser
              mas deve se ter cuidado qual operação se faz primeiro,
              portanto devem ser divididos em parenteses
           -> O que tiver dentro dos parenteses será feito antes de fora



